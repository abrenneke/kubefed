---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  creationTimestamp: null
  name: servicednsrecords.multiclusterdns.kubefed.io
spec:
  group: multiclusterdns.kubefed.io
  names:
    kind: ServiceDNSRecord
    listKind: ServiceDNSRecordList
    plural: servicednsrecords
    singular: servicednsrecord
  scope: Namespaced
  subresources:
    status: {}
  validation:
    openAPIV3Schema:
      description: "ServiceDNSRecord defines a scheme of DNS name and subdomains that
        should be programmed with endpoint information about a Service deployed in
        multiple Kubernetes clusters. ServiceDNSRecord is name-associated with the
        Services it programs endpoint information for, meaning that a ServiceDNSRecord
        expresses the intent to program DNS with information about endpoints for the
        Kubernetes Service resources with the same name and namespace in different
        clusters. \n For the example, given the following values: \n metadata.name:
        test-service metadata.namespace: test-namespace spec.federationName: test-federation
        \n the following set of DNS names will be programmed: \n Global Level: test-service.test-namespace.test-federation.svc.<federation-domain>
        Region Level: test-service.test-namespace.test-federation.svc.(status.DNS[*].region).<federation-domain>
        Zone Level  : test-service.test-namespace.test-federation.svc.(status.DNS[*].zone).(status.DNS[*].region).<federation-domain>
        \n Optionally, when DNSPrefix is specified, another DNS name will be programmed
        which would be a CNAME record pointing to DNS name at global level as below:
        <dns-prefix>.<federation-domain> --> test-service.test-namespace.test-federation.svc.<federation-domain>"
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        spec:
          description: ServiceDNSRecordSpec defines the desired state of ServiceDNSRecord.
          properties:
            allowServiceWithoutEndpoints:
              description: AllowServiceWithoutEndpoints allows DNS records to be written
                for Service shards without endpoints
              type: boolean
            dnsPrefix:
              description: DNSPrefix when specified, an additional DNS record would
                be created with <DNSPrefix>.<KubeFedDomain>
              type: string
            domainRef:
              description: DomainRef is the name of the domain object to which the
                corresponding federated service belongs
              type: string
            externalName:
              description: ExternalName when specified, replaces the service name
                portion of a resource record with the value of ExternalName.
              type: string
            recordTTL:
              description: RecordTTL is the TTL in seconds for DNS records created
                for this Service, if omitted a default would be used
              format: int64
              type: integer
          required:
          - domainRef
          type: object
        status:
          description: ServiceDNSRecordStatus defines the observed state of ServiceDNSRecord.
          properties:
            dns:
              items:
                description: ClusterDNS defines the observed status of LoadBalancer
                  within a cluster.
                properties:
                  cluster:
                    description: Cluster name
                    type: string
                  loadBalancer:
                    description: LoadBalancer for the corresponding service
                    properties:
                      ingress:
                        description: Ingress is a list containing ingress points for
                          the load-balancer. Traffic intended for the service should
                          be sent to these ingress points.
                        items:
                          description: 'LoadBalancerIngress represents the status
                            of a load-balancer ingress point: traffic intended for
                            the service should be sent to an ingress point.'
                          properties:
                            hostname:
                              description: Hostname is set for load-balancer ingress
                                points that are DNS based (typically AWS load-balancers)
                              type: string
                            ip:
                              description: IP is set for load-balancer ingress points
                                that are IP based (typically GCE or OpenStack load-balancers)
                              type: string
                          type: object
                        type: array
                    type: object
                  region:
                    description: Region to which the cluster belongs
                    type: string
                  zones:
                    description: Zones to which the cluster belongs
                    items:
                      type: string
                    type: array
                type: object
              type: array
            domain:
              description: Domain is the DNS domain of the KubeFed control plane as
                in Domain API
              type: string
          type: object
      type: object
  version: v1alpha1
  versions:
  - name: v1alpha1
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
---
